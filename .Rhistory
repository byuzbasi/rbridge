coef(model1,s='lambda.min')
coef(model1,s='lambda.1se')
model2 <- cv.bridge(X, y, q = 2)
coef(model2,s='lambda.min')
coef(model2,s='lambda.1se')
plot.cv.bridge
plot(model1)
plot(model1,sign.lambda=1)
plot(model1,sign.lambda=0)
plot(model1,sign.lambda=.1)
plot(model1,sign.lambda=1)
plot(model1,sign.lambda=-1)
plot(model1,sign.lambda=0)
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
plot(model1)
model2 <- cv.bridge(X, y, q = 2)
plot(model2)
plot(model1)
plot(model2)
model1 <- cv.rbridge(X, y, q = 1, R1.mat, r1.vec)
plot(model1)
model2 <- cv.rbridge(X, y, q = 2, R1.mat, r1.vec)
plot(model2)
model3 <- cv.rbridge(X, y, q = 1, R2.mat, r2.vec)
plot(model3)
model4 <- cv.rbridge(X, y, q = 2, R2.mat, r2.vec)
plot(model4)
library(rbridge)
library(rbridge)
cv.bridge = function (X, y, q, lambda,nfolds=10,
lambda.min=ifelse(n>p,.001,.05), nlambda=100,
eta=1e-7, converge=10^10,num_threads = 10) {
if (class(X) != "matrix") {
tmp <- try(X <- model.matrix(~0 + ., data = X), silent = TRUE)
if (class(tmp)[1] == "try-error")
stop("X must be a matrix or able to be coerced to a matrix")
}
if (storage.mode(X) == "integer")
storage.mode(X) <- "double"
if (class(y) != "numeric") {
tmp <- try(y <- as.numeric(y), silent = TRUE)
if (class(tmp)[1] == "try-error")
stop("y must numeric or able to be coerced to numeric")
}
## Set up XX, yy, lambda
stdX <- standard(X)
XX <- stdX$xx
p <- ncol(XX)
ns <- c(1:p)
yy <- y - mean(y)
n <- length(yy)
if (missing(lambda)) {
lambda <- Lambdas_Grid(XX, yy,q,lambda.min, nlambda)
user.lambda <- FALSE
} else {
nlambda <- length(lambda)
user.lambda <- TRUE
}
#R <- R1.mat; r <- r1.vec;
fit <- CV_Bridge(XX,yy,q, lambda, converge=converge, num_folds=nfolds,num_threads=10, eta=eta)
cve <- apply(fit, 1, sum)
#cvse <- apply(fit, 1, sd)/sqrt(nlambda)
cvse <- sqrt(apply(scale(t(fit), cve, FALSE)^2, 2, mean,na.rm = TRUE)/(n - 1))
#cvse <- sqrt(apply(fit, 1, sd,na.rm = TRUE)/(n - 1))
bridge.fit = bridge(X, y, q,lambda=lambda, eta=eta)
nz = sapply(predict(bridge.fit, type = "nonzero"),
length)
val <- list(cve = cve, cvse = cvse, cvup = cve + cvse,
cvlo = cve - cvse, lambda = lambda, nz=nz,
betas = bridge.fit$betas )
lamin <- getmin(lambda, cve, cvse)
obj = c(val, as.list(lamin))
class(obj) = "cv.bridge"
obj
}
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
library(rbridge)
model1 <- cv.bridge(X, y, q = 1)
library(rbridge)
model1 <- cv.bridge(X, y, q = 1)
print(model1)
model1 <- cv.bridge(X, y, q = 1,eta = .1)
print(model1)
model2 <- cv.bridge(X, y, q = 1)
print(model2)
model2 <- cv.bridge(X, y, q = 1,converge = 10^2)
print(model2)
model2 <- cv.bridge(X, y, q = 1,converge = 10^3)
print(model2)
model2 <- cv.bridge(X, y, q = 1,converge = 10^3)
print(model2)
model2 <- cv.bridge(X, y, q = 1,converge = 10^3)
print(model2)
library(rbridge)
bridge
library(rbridge)
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
p.active <- which(beta != 0)
### Restricted Matrix and vector
### Res 1
c1 <- c(1,1,0,0,1,0,0,0)
R1.mat <- matrix(c1,nrow = 1, ncol = p)
r1.vec <- as.matrix(c(6.5),1,1)
### Res 2
c2 <- c(-1,1,0,0,1,0,0,0)
R2.mat <- matrix(c2,nrow = 1, ncol = p)
r2.vec <- matrix(c(0.5),nrow = 1, ncol = 1)
### Res 3
R3.mat <- t(matrix(c(c1,c2),nrow = p, ncol = 2))
r3.vec <- matrix(c(6.5,0.5),nrow = 2, ncol = 1)
### Res 4
R4.mat = diag(1,p,p)[-p.active,]
r4.vec <- matrix(rep(0,p-length(p.active)),nrow = p-length(p.active), ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.rbridge(X, y, q = 1, R1.mat, r1.vec)
print(model1)
model1 <- cv.rbridge(X, y, q = 1, R1.mat, r1.vec, eta=.1)
print(model1)
model1 <- cv.rbridge(X, y, q = 2, R1.mat, r1.vec, eta=.1)
print(model1)
library(rbridge)
library(rbridge)
library(rbridge)
library(rbridge)
devtools::check()
devtools::check("rbridge")
library(devtools)
devtools::check()
devtools::check("rbridge")
library(rbridge)
devtools::check()
library(devtools)
devtools::check()
check()
devtools::check()
setwd("~/Desktop/rbridge_package")
devtools::check()
devtools::revdep_check()
devtools::check()
traceback()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
devtools::revdep_check()
revdepcheck::revdep_check()
install.packages("revdepcheck")
revdepcheck::revdep_check()
devtools::revdep_check()
devtools::revdep_check_reset()
revdepcheck::revdep_reset()
install.packages("remotes")
install.packages("remotes")
remotes::install_github("r-lib/revdepcheck")
devtools::revdep_check_reset()
revdepcheck::revdep_reset()
install.packages("revdepcheck")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
devtools::create("rbridge")
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
devtools::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license('rbridge')
devtools::check()
traceback()
stop(cnd)
devtools::check()
devtools::use_mit_license()
devtools::use_mit_license('rbridge')
devtools::use_package()
usethis::use_package()
usethis::use_package('rbridge')
devtools::check()
devtools::check()
devtools::create()
usethis::create_package('rbridge')
library(): Depends
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
Requires(post): openssh-server
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
devtools::create("mypackage")
devtools::create("rbridge")
usethis::create_package('rbridge')
usethis::create_package('abc')
usethis::create_package('rbridge')
library(rbridge)
devtools::check()
devtools::install()
devtools::check()
#usethis::use_mit_license('rbridge')
use_gpl3_license('rbridge')
#usethis::use_mit_license('rbridge')
usethis::use_gpl3_license('rbridge')
library(rbridge)
devtools::check()
usethis::use_description_defaults()('rbridge')
use_description_defaults()('rbridge')
usethis::use_description_defaults('rbridge')
usethis::use_description_defaults()
usethis::use_description_defaults('rbridge')
usethis::use_description()
devtools::check()
usethis::use_description_defaults('rbridge')
usethis::use_description_defaults()
devtools::document()
library(rbridge)
devtools::check()
devtools::check()
usethis::create_package('rbridge')
usethis::create_package('rbridge')
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
library(rbridge)
devtools::check()
traceback()
devtools::check()
usethis::create_package('rbridge2')
library(rbridge)
#usethis::use_mit_license('rbridge')
usethis::use_gpl2_license('rbridge')
#usethis::use_mit_license('rbridge')
usethis::use_gpl3_license('rbridge')
library(rbridge)
library(rbridge)
usethis::use_testthat()
install.packages("testthat")
usethis::use_testthat()
library(rbridge)
usethis::create_package("rbridge")
library(rbridge)
devtools::document()
devtools::check()
devtools::install_deps(dependencies = TRUE)
devtools::check()
devtools::load_all()
devtools::install_deps(dependencies = TRUE)
devtools::load_all()
check(force_suggests = FALSE)
rbridge::foo()
devtools::check()
library(pkg)
devtools::load_all()
devtools::install_deps(dependencies = TRUE)
check(force_suggests = FALSE)
devtools:::test()
devtools::use_testthat()
usethis::use_testthat()
load_all()
devtools::load_all()
library(rbridge)
devtools::document()
devtools::test()
library(rbridge)
devtools::test()
rbridge
standard
Bridge
devtools::test()
standard
standard(X)
X <- matrix(rnorm(9),3,3)
standard(X)
X
standard(X)
standard
standard(X)
library(rbridge)
standard
standard(X)
rbridge
rbridge
standard
library(rbridge)
standard
standard
rbridge
library(rbridge)
rbridge
library(rbridge)
rbridge
X <- matrix(rnorm(9),3,3)
X
standard(X)
devtools::install_deps(dependencies = TRUE)
standard(X)
library(rbridge)
rbridge
library(rbridge)
rbridge
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
cv.bridge
library(rbridge)
model1 <- cv.bridge(X, y, q = 1)
library(rbridge)
cv.bridge
devtools::load_all()
devtools::install_deps(dependencies = TRUE)
rbridge
standard
X <- matrix(rnorm(9),3,3)
standard(X)
devtools::test()
library(rbridge)
rbridge
standard
X <- matrix(rnorm(9),3,3)
library(rbridge)
rbridge
devtools::install_deps(dependencies = TRUE)
rbridge
devtools::load_all()
rbridge
pkgload::pkg_path()
devtools::load_all()
devtools::load_all()
library(rbridge)
rbridge
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
library(rbridge)
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
cv.bridge
rbridge
usethis::use_testthat()
library(rbridge)
rbridge
rbridge::foo()
rbridge
cv.rbridge
library(rbridge)
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
cv.bridge
library(rbridge)
set.seed(2019)
beta <- c(3, 1.5, 0, 0, 2, 0, 0, 0)
p <- length(beta)
beta <- matrix(beta, nrow = p, ncol = 1)
n = 100
X = matrix(rnorm(n*p),n,p)
y = X%*%beta + rnorm(n)
model1 <- cv.bridge(X, y, q = 1)
print(model1)
library(rbridge)
rbridge
library(rbridge)
rbridge
roxygen2::roxygenise()
rbridge
library(rbridge)
rbridge
roxygen2::roxygenise()
rbridge
cv.rbridge
devtools::document()
library(rbridge)
rbridge
rbridge
library(rbridge)
bridge
bridge
devtools::document()
library(rbridge)
bridge
rbridge
library(rbridge)
rbridge
bridge
export(rbridge)
devtools::document("rbridge")
setwd("~/Desktop/rbridge_package")
devtools::document("~/Desktop/rbridge_package/rbridge")
devtools::document("/Desktop/rbridge_package/rbridge")
devtools::document("rbridge")
devtools::document()
rbridge
library(rbridge)
rbridge
devtools::document()
rbridge
rbridge
bridge
library(rbridge)
bridge
library(rbridge)
bridge
rbridge
library(rbridge)
rbridge
devtools::check()
rbridge()
rbridge
bridge
library(rbridge)
rbridge
devtools::build()
rbridge
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
library(rbridge)
rbridge
roxygen2::roxygenise()
devtools::document()
rbridge
library(rbridge)
rbridge
bridge
library(rbridge)
library(rbridge)
